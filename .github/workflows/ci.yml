name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build pkg-config \
            libbluetooth-dev libsystemd-dev libsodium-dev ccache

      - name: Set CCACHE_DIR
        run: echo "CCACHE_DIR=$HOME/.ccache" >> "$GITHUB_ENV"

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Configure (Ninja, BlueZ ON)
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DBITCHAT_WERROR=ON \
            -DBITCHAT_WITH_BLUEZ=ON

      - name: Build
        run: cmake --build build -j

      - name: Test
        run: ctest --test-dir build --output-on-failure

      - name: Smoke test (basic CLI <-> daemon)
        shell: bash
        run: |
          set -euo pipefail
          ./build/bin/bitchatd >daemon.log 2>&1 &
          DAEMON_PID=$!
          trap 'kill $DAEMON_PID 2>/dev/null || true' EXIT

          sock="${HOME}/.cache/bitchat-clone/ctl.sock"
          # wait for socket up to 4s
          for i in {1..40}; do
            [[ -S "$sock" ]] && break
            sleep 0.1
          done
          [[ -S "$sock" ]] || { echo "socket not ready: $sock" >&2; exit 1; }

          ./build/bin/bitchatctl send "ci hello"
          ./build/bin/bitchatctl tail on
          ./build/bin/bitchatctl quit

          # wait daemon exit (up to 3s)
          for i in {1..30}; do
            if ! kill -0 "$DAEMON_PID" 2>/dev/null; then
              break
            fi
            sleep 0.1
          done
          if kill -0 "$DAEMON_PID" 2>/dev/null; then
            echo "daemon still running!" >&2
            exit 1
          fi
          # socket should be gone after graceful shutdown
          [[ ! -S "$sock" ]] || { echo "socket still exists after quit: $sock" >&2; exit 1; }

      - name: Smoke test (long message ~4096B)
        shell: bash
        run: |
          set -euo pipefail
          ./build/bin/bitchatd >daemon_long.log 2>&1 &
          DAEMON_PID=$!
          trap 'kill $DAEMON_PID 2>/dev/null || true' EXIT

          sock="${HOME}/.cache/bitchat-clone/ctl.sock"
          for i in {1..40}; do
            [[ -S "$sock" ]] && break
            sleep 0.1
          done
          [[ -S "$sock" ]] || { echo "socket not ready: $sock" >&2; exit 1; }

          # build a 4096B payload without trailing newline
          longmsg="$(python3 -c 'import sys; sys.stdout.write("X"*4096)')"

          ./build/bin/bitchatctl send "$longmsg"
          ./build/bin/bitchatctl quit

          for i in {1..30}; do
            if ! kill -0 "$DAEMON_PID" 2>/dev/null; then
              break
            fi
            sleep 0.1
          done
          if kill -0 "$DAEMON_PID" 2>/dev/null; then
            echo "daemon still running!" >&2
            exit 1
          fi
          [[ ! -S "$sock" ]] || { echo "socket still exists after quit: $sock" >&2; exit 1; }

      - name: Show ccache stats
        run: ccache -s || true

  asan-ubsan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install libsodium
        run: |
          sudo apt-get update
          sudo apt-get install -y libsodium-dev pkg-config

      - name: Configure (ASan+UBSan)
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_C_FLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer -O1 -g" \
            -DCMAKE_CXX_FLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer -O1 -g" \
            -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address,undefined" \
            -DCMAKE_SHARED_LINKER_FLAGS="-fsanitize=address,undefined" \
            -DBITCHAT_WERROR=ON \
            -DBITCHAT_WITH_BLUEZ=OFF

      - name: Build
        run: cmake --build build -j

      - name: Run unit tests (exclude end-to-end)
        env:
          ASAN_OPTIONS: detect_leaks=1:abort_on_error=1
          UBSAN_OPTIONS: print_stacktrace=1
        run: |
          ctest --test-dir build --output-on-failure