name: build-release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target: [amd64, aarch64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install toolchains and deps
        run: |
          sudo apt-get update
          case "${{ matrix.target }}" in
            amd64)
              sudo apt-get install -y build-essential cmake pkg-config libsystemd-dev
              ;;
            aarch64)
              sudo dpkg --add-architecture arm64
              sudo apt-get update
              sudo apt-get install -y build-essential cmake pkg-config \
                   gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
                   libsystemd-dev:arm64
              ;;
          esac

      - name: Configure
        run: |
          mkdir -p build && cd build
          case "${{ matrix.target }}" in
            amd64)
              cmake .. -DCMAKE_BUILD_TYPE=Release -DBITCHAT_HAVE_SDBUS=1
              ;;
            aarch64)
              cmake .. -DCMAKE_BUILD_TYPE=Release -DBITCHAT_HAVE_SDBUS=1 \
                -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-aarch64.cmake
              ;;
          esac

      - name: Build
        run: cmake --build build -j

      - name: Collect and strip
        run: |
          set -e
          cd build
          OUT="bitchat-${{ matrix.target }}"
          mkdir -p "release/$OUT/bin" "release/$OUT/bin-unstripped"

          # Collect executables (adjust patterns to your targets if needed)
          find . -type f -perm -111 -name 'bitchat*' -exec cp {} "release/$OUT/bin/" \; || true

          # Save unstripped copies for debug
          cp -a "release/$OUT/bin/." "release/$OUT/bin-unstripped/" || true

          # ldd report
          {
            for f in release/$OUT/bin/*; do
              if file "$f" | grep -q ELF; then
                echo "==== $f ===="
                ldd "$f" || true
              fi
            done
          } > "release/$OUT/ldd.txt" || true

          # Strip
          case "${{ matrix.target }}" in
            amd64) STRIP=strip ;;
            aarch64) STRIP=aarch64-linux-gnu-strip ;;
          esac
          find "release/$OUT/bin" -type f -exec $STRIP {} \; || true

          # Commit SHA
          git rev-parse HEAD > "release/$OUT/commit.txt"

          # Tarball
          tar -C release -czf "${OUT}.tar.gz" "$OUT"
          ls -lah "${OUT}.tar.gz"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bitchat-${{ matrix.target }}
          path: build/*.tar.gz

  release:
    needs: build
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/bitchat-amd64/*.tar.gz
            artifacts/bitchat-aarch64/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
